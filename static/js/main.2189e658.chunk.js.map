{"version":3,"sources":["components/listitems.js","components/main.js","components/home.js","components/title.js","App.js","serviceWorker.js","index.js"],"names":["Listitems","props","litems","items","map","item","className","key","type","id","value","text","onChange","e","update","target","onClick","deleteitem","icon","library","add","faTrash","Main","state","listitems","citems","handleinput","setState","Date","now","additem","preventDefault","nitems","filtereditems","filter","nlitems","console","log","onSubmit","this","name","placeholder","Component","Home","to","Title","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sXA0BeA,MAtBf,SAAoBC,GAChB,IACMC,EADQD,EAAME,MACCC,KAAI,SAAAC,GACrB,OAAO,yBAAKC,UAAU,SAASC,IAAKF,EAAKE,KACrC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAAOZ,EAAMa,OAAOD,EAAEE,OAAOL,MAAML,EAAKE,QACtG,8BACI,4BAAQD,UAAU,QAAlB,MACA,kBAAC,IAAD,CAAiBA,UAAU,UAAUU,QAAS,WAAOf,EAAMgB,WAAWZ,EAAKE,MAAOW,KAAK,gBAOvG,OACI,6BACKhB,I,eCfbiB,IAAQC,IAAIC,K,IAwFGC,E,4MArFXC,MAAQ,CACJC,UAAU,GAEVC,OAAO,CACLd,KAAK,GACLJ,IAAI,K,EAKRmB,YAAc,SAACb,GACb,EAAKc,SAAS,CACZF,OAAO,CACLd,KAAKE,EAAEE,OAAOL,MACdH,IAAKqB,KAAKC,U,EAKhBC,QAAU,SAACjB,GAETA,EAAEkB,iBAEF,IAAMC,EAAS,EAAKT,MAAME,OAE1B,GAAkB,KAAfO,EAAOrB,KACV,CACE,IAAMa,EAAS,sBAAO,EAAKD,MAAMC,WAAlB,CAA6BQ,IAE5C,EAAKL,SAAS,CACZH,UAAUA,EACVC,OAAO,CACLd,KAAK,GACLJ,IAAI,Q,EAQZU,WAAa,SAACV,GACZ,IAAM0B,EAAgB,EAAKV,MAAMC,UAAUU,QAAO,SAAA7B,GAAI,OAAIA,EAAKE,MAAOA,KAEtE,EAAKoB,SAAS,CACZH,UAAUS,K,EAIdnB,OAAS,SAACH,EAAKJ,GAEb,IAAM4B,EAAU,EAAKZ,MAAMC,UAE3BW,EAAQ/B,KAAI,SAAAC,GAEPA,EAAKE,MAAMA,IACZ6B,QAAQC,IAAIhC,EAAKE,IAAK,OAAOA,GAC7BF,EAAKM,KAAMA,MAKf,EAAKgB,SAAS,CACZH,UAAWW,K,uDAKb,OACE,yBAAK7B,UAAU,QACb,yBAAKA,UAAU,YACb,iCACE,0BAAMA,UAAU,WAAWgC,SAAUC,KAAKT,SACxC,2BAAOtB,KAAK,OAAOgC,KAAK,QAAQC,YAAY,mBAAmB/B,MAAO6B,KAAKhB,MAAME,OAAOd,KAAMC,SAAU2B,KAAKb,cAC7G,4BAAQlB,KAAK,UAAb,QAEF,kBAAC,EAAD,CAAWL,MAAOoC,KAAKhB,MAAMC,UAAWP,WAAYsB,KAAKtB,WAAYH,OAAQyB,KAAKzB,gB,GA7E/E4B,a,eCSJC,MAZf,WACI,OAAO,6BACH,6BAASrC,UAAU,MACf,wBAAIA,UAAU,MACV,kBAAC,IAAD,CAAMsC,GAAG,IAAG,2CACZ,yBAAKtC,UAAU,QACf,kBAAC,IAAD,CAAMsC,GAAG,QAAO,gDCFjBC,MANf,WACI,OAAO,yBAAKvC,UAAU,OAClB,wBAAIA,UAAU,QAAd,mB,OCkBOwC,E,uKAdX,OACE,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,OAAOC,UAAW3B,W,GAR5BoB,aCKEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.2189e658.chunk.js","sourcesContent":["import React from 'react';\r\nimport './listitems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nfunction Listitems (props) {\r\n    const items = props.items;\r\n    const litems = items.map(item =>{\r\n        return <div className=\"mylist\" key={item.key}>\r\n            <p>\r\n                <input type=\"text\" id={item.key} value={item.text} onChange={(e) => {props.update(e.target.value,item.key)}}/>\r\n                <span>\r\n                    <button className=\"obut\">OK</button>\r\n                    <FontAwesomeIcon className=\"faicons\" onClick={() => {props.deleteitem(item.key)}} icon=\"trash\"  />\r\n                </span>\r\n            </p>\r\n\r\n        </div>\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            {litems}\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Listitems;","import React, { Component } from 'react';\r\nimport './main.css'\r\nimport Listitems from './listitems';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        listitems:[],\r\n    \r\n        citems:{\r\n          text:'',\r\n          key:''\r\n        }\r\n    \r\n      }\r\n    \r\n      handleinput = (e) => {\r\n        this.setState({\r\n          citems:{\r\n            text:e.target.value,\r\n            key: Date.now()\r\n          }\r\n        })\r\n      }\r\n    \r\n      additem = (e) => {\r\n    \r\n        e.preventDefault();\r\n    \r\n        const nitems = this.state.citems;\r\n    \r\n        if(nitems.text !==\"\")\r\n        {\r\n          const listitems = [...this.state.listitems, nitems];\r\n    \r\n          this.setState({\r\n            listitems:listitems,\r\n            citems:{\r\n              text:'',\r\n              key:''\r\n            }\r\n          })\r\n        }\r\n      }\r\n    \r\n      \r\n    \r\n      deleteitem = (key) => {\r\n        const filtereditems = this.state.listitems.filter(item => item.key!== key);\r\n    \r\n        this.setState({\r\n          listitems:filtereditems\r\n        })\r\n      }\r\n    \r\n      update = (text,key) => {\r\n    \r\n        const nlitems = this.state.listitems;\r\n    \r\n        nlitems.map(item=>{    \r\n    \r\n          if(item.key===key){\r\n            console.log(item.key +\"    \"+key)\r\n            item.text= text;\r\n          }\r\n    \r\n        })\r\n    \r\n        this.setState({\r\n          listitems: nlitems\r\n        })\r\n      }\r\n    \r\n      render(){\r\n        return (\r\n          <div className=\"main\">\r\n            <div className=\"mainpage\">\r\n              <section>\r\n                <form className=\"todoform\" onSubmit={this.additem}>\r\n                  <input type=\"text\" name=\"input\" placeholder=\"Enter Task....!!\" value={this.state.citems.text} onChange={this.handleinput} />\r\n                  <button type=\"submit\">ADD</button>\r\n                </form>\r\n                <Listitems items={this.state.listitems} deleteitem={this.deleteitem} update={this.update} />\r\n              </section>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n\r\nexport default Main;","import React from 'react';\r\nimport './home.css'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nfunction Home () {\r\n    return(<div>\r\n        <section className=\"hm\">\r\n            <ul className=\"nl\">\r\n                <Link to=\"\"><li>TO-DO-LIST</li></Link>\r\n                <div className=\"gap\"></div>\r\n                <Link to=\"/add\"><li>+ ADD TASKS</li></Link>\r\n            </ul>\r\n        </section>\r\n    </div>)\r\n}\r\n\r\nexport default Home;","import React from 'react'\r\nimport './home.css'\r\n\r\nfunction Title () {\r\n    return(<div className=\"h1n\">\r\n        <h1 className=\"h1n1\">Plan your day</h1>\r\n    </div>)\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/main'\nimport Home from './components/home'\nimport Title from './components/title'\nimport {BrowserRouter,Route,Switch} from 'react-router-dom'\n\nclass App extends Component {\n  render(){\n    return(\n      <BrowserRouter>\n      <Switch>\n        <div className=\"App\">\n          <Home />\n          <Route exact path=\"/\" component={Title}></Route>\n          <Route exact path=\"/add\" component={Main}></Route>\n        </div>\n      </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}